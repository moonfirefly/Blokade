//***************************************************************************
//
//  BlokadeGame.hpp
//  Blokade
//
//  Created by moonfirefy on 2013-01-11.
//
//*-------------------------------------------------------------------------*
//
// Copyright 2013 moonfirefy
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//***************************************************************************

#ifndef __Blokade_BlokadeGame_hpp
#define __Blokade_BlokadeGame_hpp

#include <SFML/Audio.hpp>
#include <list>
#include "../Engine/GFXEngine.hpp"
#include "../Engine/GFXMenu.hpp"
#include "../Engine/GFXMenuItem.hpp"
#include "../Engine/GFXMenuButton.hpp"
#include "../Engine/GFXMenuSelector.hpp"
#include "Shapes.hpp"
#include "../Engine/GFXFont.hpp"
#include "Points.hpp"
#include "SoundMngr.hpp"
#include "../ResourcePath.hpp"
#include "i18n.hpp"
#include "FileAccess.hpp"
#include "../Engine/GFXMenuInput.hpp"

//&=========================================================================*
//&      Class  game
//&=========================================================================*
//
//==========================================================================*
class BlokadeGame : public GFXEngine {

// =============================
// ======== P U B L I C ========
public:

    enum GAME_STATE {
        NO_STATE = 0,
        MAIN_MENU,
        GAME
    };

    enum GAME_SUB_STATE {
        NORMAL = 0,
        REMOVING_LINES,
        DEAD,
        OPTIONS_MENU,
        SCORES_MENU,
        LEVEL_MENU,
        NEW_SCORE_MENU
    };

    enum BLOCK_TYPE {
        EMPTY = 0,
        ONE,
        TWO,
        THREE,
        FOUR,
        FIVE,
        SIX,
        SEVEN,
        EIGHT
    };

    //&---------------------------------------------------------------------*
    //&      Constructor  BlokadeGame
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    BlokadeGame();

    //&---------------------------------------------------------------------*
    //&      Destructor  ~BlokadeGame
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    ~BlokadeGame() {}

    //&---------------------------------------------------------------------*
    //&      Method  init
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    bool init();

    //&---------------------------------------------------------------------*
    //&      Method  reset
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void reset();

    //&---------------------------------------------------------------------*
    //&      Method  input
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void input();

    //&---------------------------------------------------------------------*
    //&      Method  update
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void update();

    //&---------------------------------------------------------------------*
    //&      Method  render
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void render();

    //&---------------------------------------------------------------------*
    //&      Method  pause
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void pause();

    //&---------------------------------------------------------------------*
    //&      Method  resume
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void resume();

    //&---------------------------------------------------------------------*
    //&      Method  shutdown
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void shutdown();

// =============================
// ======= P R I V A T E =======
private:

    //&---------------------------------------------------------------------*
    //&      Method  plotShapeToBuffer
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void plotShapeToBuffer();

    //&---------------------------------------------------------------------*
    //&      Method  drawNextShape
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void drawNextShape();

    //&---------------------------------------------------------------------*
    //&      Method  startNewShape
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void startNewShape();

    //&---------------------------------------------------------------------*
    //&      Method  isMoveValid
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    bool isMoveValid(int id_x, int id_y, int id_rotation);

    //&---------------------------------------------------------------------*
    //&      Method  copyBufferToFixed
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void copyBufferToFixed();

    //&---------------------------------------------------------------------*
    //&      Method  copyFixedToBuffer
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void copyFixedToBuffer();

    //&---------------------------------------------------------------------*
    //&      Method  newGame
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void newGame();

    //&---------------------------------------------------------------------*
    //&      Method  isLineComplete
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    bool isLineComplete();

    //&---------------------------------------------------------------------*
    //&      Method  foldEmptyLines
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void foldEmptyLines();

    //&---------------------------------------------------------------------*
    //&      Method  resetGameInput
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void resetGameInput();

    //&---------------------------------------------------------------------*
    //&      Method  updateGameInput
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateGameInput();

    //&---------------------------------------------------------------------*
    //&      Method  die
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void die();

    //&---------------------------------------------------------------------*
    //&      Method  updateMainMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateMainMenu();

    //&---------------------------------------------------------------------*
    //&      Method  updatePauseMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updatePauseMenu();

    //&---------------------------------------------------------------------*
    //&      Method  updateGameOverMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateGameOverMenu();

    //&---------------------------------------------------------------------*
    //&      Method  updateOptionsMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateOptionsMenu();

    //&---------------------------------------------------------------------*
    //&      Method  updateLevelsMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateLevelsMenu();

    //&---------------------------------------------------------------------*
    //&      Method  updateLevel
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateLevel(const bool id_playSound);

    //&---------------------------------------------------------------------*
    //&      Method  updateShapeDropSpeed
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateShapeDropSpeed();

    //&---------------------------------------------------------------------*
    //&      Method  updateSidewaysMove
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateSidewaysMove();

    //&---------------------------------------------------------------------*
    //&      Method  updateRotate
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateRotate();

    //&---------------------------------------------------------------------*
    //&      Method  updateShapeFallByOneLine
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    bool updateShapeFallByOneLine();

    //&---------------------------------------------------------------------*
    //&      Method  updateRemovingCompletedLines
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateRemovingCompletedLines();

    //&---------------------------------------------------------------------*
    //&      Method  renderMainMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void renderMainMenu();

    //&---------------------------------------------------------------------*
    //&      Method  renderOptionsMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void renderOptionsMenu();

    //&---------------------------------------------------------------------*
    //&      Method  renderLevelsMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void renderLevelsMenu();

    //&---------------------------------------------------------------------*
    //&      Method  updateNewScoreMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateNewScoreMenu();

    //&---------------------------------------------------------------------*
    //&      Method  renderGame
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void renderGame();

    //&---------------------------------------------------------------------*
    //&      Method  dropShapeRightDown
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void dropShapeRightDown();

    //&---------------------------------------------------------------------*
    //&      Method  loadSettings
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void loadSettings();

    //&---------------------------------------------------------------------*
    //&      Method  saveSettings
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void saveSettings(const bool id_saveTopScore);

    //&---------------------------------------------------------------------*
    //&      Method  updateHighScoresMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void updateHighScoresMenu();

    //&---------------------------------------------------------------------*
    //&      Method  renderHighScoresMenu
    //&---------------------------------------------------------------------*
    //
    //----------------------------------------------------------------------*
    void renderHighScoresMenu();

    static const int GRID_WIDTH = 10;
    static const int GRID_HEIGHT = 20;

    static const int GAME_LABEL_CENTER_WIDTH = 254;

    GAME_STATE m_gamestate;
    GAME_SUB_STATE m_gameSubState;
	bool m_isPaused;

    sf::Texture m_menuBackgrndTexture;
    sf::Sprite m_menuBackgrndSprite;

    sf::Texture m_gameBackgrndTexture;
    sf::Sprite m_gameBackgrndSprite;

    enum BUTTON {
        START = 100,
        EXIT,
        RESTART,
        RESUME,
        MENU,
        SCORES,
        OPTIONS,
        SOUND,
        MUSIC,
        BACK,
        LEVEL,
        QUIT,
        NAME
    };

    GFXMenu m_mainMenu;
    GFXMenuButton m_mainMenuStart;
    GFXMenuButton m_mainMenuOptions;
    GFXMenuButton m_mainMenuScores;
    GFXMenuButton m_mainMenuExit;

    GFXMenu m_optionsMenu;
    GFXMenuSelector m_optionsMenuVolumeSound;
    GFXMenuSelector m_optionsMenuVolumeMusic;
    GFXMenuButton m_optionsMenuBack;

    GFXMenu m_levelMenu;
    GFXMenuSelector m_levelMenuLevel;
    GFXMenuButton m_levelMenuBack;

    GFXMenu m_gameMenuPause;
    GFXMenuButton m_gameMenuPauseResume;
    GFXMenuButton m_gameMenuPauseOptions;
    GFXMenuButton m_gameMenuPauseRestart;
    GFXMenuButton m_gameMenuPauseQuit;

    GFXMenu m_gameMenuOver;
    GFXMenuButton m_gameMenuOverRestart;
    GFXMenuButton m_gameMenuOverQuit;
    
    GFXMenu m_gameMenuNewScore;
    GFXMenuInput m_gameMenuNewScoreInput;

    GFXMenu m_scoresMenu;
    GFXMenuButton m_scoresMenuBack;

    GFXFont m_font;

    sf::Texture m_blocksTexture;
    sf::Sprite m_blocksSprite;

    SoundMngr m_soundMngr;

    int m_gridLayoutFixed[GRID_HEIGHT][GRID_WIDTH];
    int m_gridLayoutBuffer[GRID_HEIGHT][GRID_WIDTH];

    static const int GRID_TOP = 90;
    static const int GRID_LEFT = 374;
    static const int GRID_BLOCK_SIZE = 28;  // pixels

    int m_nextShape = 0;
    int m_currentShape = 0;
    int m_currentShapeRotation = 0; // 0-3
    static const int TOTAL_SHAPES = 7;
    static const int SHAPE_ROTATION_MAX = 3;
    int m_shapeGridX = 0;
    int m_shapeGridY = 0;
    static const int FALL_TIME_SLOW_LVL0 = 1000;
    static const int FALL_TIME_FAST_LVL0 = 100;
    int m_shapeFallTimeMaxSlow = FALL_TIME_SLOW_LVL0;
    int m_shapeFallTimeMaxFast = FALL_TIME_FAST_LVL0;
    int m_shapeFallTimeMax = 0;
    int m_shapeFallTime = 0;

    int m_previousLevel = 0;

    int m_keyMoveTimeMax = 150/2;
    int m_keyMoveTime = 0;

    int m_removeLineTimeMax = 50;
    int m_removeLineTime = 0;
    int m_removeLineXIndex = 0;

    int m_dyingTimeMax = 75;
    int m_dyingTime = 0;
    int m_dyingYIndex = 0;

    bool m_moveLeft = false;
    bool m_moveRight = false;
    bool m_rotate = false;
    bool m_speedUp = false;
    bool m_dropShapeAllTheWayDown = false;

    std::list<int> m_completeLines;

    Points m_points;
    FileAccess m_fileAccess;
    FileAccess::Data* m_settings;
    bool m_settingsSaveSuccess = true;
};

#endif /* defined(__Blokade_BlokadeGame_hpp) */
